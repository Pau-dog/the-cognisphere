version: '3.8'

services:
  # Production Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: cognisphere_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_cache:/var/cache/nginx
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    networks:
      - cognisphere_network

  # Production Backend
  backend:
    build:
      context: ../backend
      dockerfile: ../backend/Dockerfile
      target: production
    container_name: cognisphere_backend
    environment:
      - PYTHONPATH=/app
      - SIMULATION_SEED=${SIMULATION_SEED:-42}
      - SIMULATION_AGENTS=${SIMULATION_AGENTS:-500}
      - SIMULATION_TICKS=${SIMULATION_TICKS:-10000}
      - LLM_MODE=${LLM_MODE:-mock}
      - MEMORY_BACKEND=${MEMORY_BACKEND:-neo4j}
      - VECTOR_BACKEND=${VECTOR_BACKEND:-faiss}
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_AUTH=${NEO4J_AUTH}
      - REDIS_URL=redis://redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - ENABLE_METRICS=${ENABLE_METRICS:-true}
    depends_on:
      - neo4j
      - redis
    restart: unless-stopped
    networks:
      - cognisphere_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Production Frontend
  frontend:
    build:
      context: ../frontend
      dockerfile: ../frontend/Dockerfile
      target: production
    container_name: cognisphere_frontend
    environment:
      - NODE_ENV=production
      - VITE_API_URL=${VITE_API_URL}
      - VITE_WS_URL=${VITE_WS_URL}
    restart: unless-stopped
    networks:
      - cognisphere_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Neo4j Database
  neo4j:
    image: neo4j:5.15-community
    container_name: cognisphere_neo4j
    environment:
      - NEO4J_AUTH=${NEO4J_AUTH}
      - NEO4J_dbms_memory_heap_initial__size=512m
      - NEO4J_dbms_memory_heap_max__size=2G
      - NEO4J_dbms_memory_pagecache_size=1G
      - NEO4J_dbms_security_procedures_unrestricted=gds.*,apoc.*
      - NEO4J_dbms_security_procedures_allowlist=gds.*,apoc.*
      - NEO4J_apoc_export_file_enabled=true
      - NEO4J_apoc_import_file_enabled=true
      - NEO4J_apoc_import_file_use__neo4j__config=true
      - NEO4J_apoc_http_timeout__connect=60000
      - NEO4J_apoc_http_timeout__read=60000
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    ports:
      - "7474:7474"
      - "7687:7687"
    restart: unless-stopped
    networks:
      - cognisphere_network
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "${NEO4J_AUTH#*/}", "RETURN 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: cognisphere_redis
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
      - redis_config:/usr/local/etc/redis
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - cognisphere_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: cognisphere_prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    restart: unless-stopped
    networks:
      - cognisphere_network

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: cognisphere_grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-cognisphere_grafana}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
    ports:
      - "3001:3000"
    restart: unless-stopped
    networks:
      - cognisphere_network
    depends_on:
      - prometheus

volumes:
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local
  neo4j_import:
    driver: local
  neo4j_plugins:
    driver: local
  redis_data:
    driver: local
  redis_config:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  nginx_cache:
    driver: local
  nginx_logs:
    driver: local

networks:
  cognisphere_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
