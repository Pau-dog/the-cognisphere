name: Deploy Backend (Render)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Trigger Render deployment
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          serviceId: ${{ secrets.RENDER_SERVICE_ID }}
          apiKey: ${{ secrets.RENDER_API_KEY }}
      
      - name: Wait for deployment to complete
        run: |
          echo "‚è≥ Waiting for Render deployment to complete..."
          sleep 30
      
      - name: Health check
        run: |
          echo "üè• Performing health check..."
          
          # Try health check multiple times
          for i in {1..20}; do
            echo "Attempt $i/20..."
            
            if curl -f -s --max-time 30 "${{ secrets.RENDER_HEALTH_URL }}" > /dev/null; then
              echo "‚úÖ Health check passed!"
              echo "üöÄ The Cognisphere backend is live at:"
              echo "   ${{ secrets.RENDER_HEALTH_URL }}"
              echo ""
              echo "üìö API Documentation:"
              echo "   ${{ secrets.RENDER_HEALTH_URL }}/docs"
              echo ""
              echo "üîç Available endpoints:"
              echo "   ‚Ä¢ GET  /healthz - Health check"
              echo "   ‚Ä¢ GET  /api/simulation/state - Simulation state"
              echo "   ‚Ä¢ POST /api/simulation/initialize - Initialize simulation"
              echo "   ‚Ä¢ POST /api/simulation/run - Start simulation"
              echo "   ‚Ä¢ POST /api/simulation/pause - Pause simulation"
              exit 0
            fi
            
            echo "‚è≥ Still waiting... ($i/20)"
            sleep 15
          done
          
          echo "‚ùå Health check failed after 20 attempts"
          echo "üîç Checking if service is responding at all..."
          
          # Try basic connectivity
          if curl -s --max-time 10 "${{ secrets.RENDER_HEALTH_URL }}" > /dev/null; then
            echo "‚ö†Ô∏è Service is responding but health check failed"
            echo "üîß This might be a temporary issue"
          else
            echo "‚ùå Service is not responding"
            echo "üö® Deployment may have failed"
          fi
          
          exit 1
      
      - name: Test API endpoints
        run: |
          echo "üß™ Testing key API endpoints..."
          
          BASE_URL="${{ secrets.RENDER_HEALTH_URL }}"
          
          # Test health endpoint
          echo "Testing health endpoint..."
          if curl -f -s "$BASE_URL/healthz" | grep -q "ok"; then
            echo "‚úÖ Health endpoint working"
          else
            echo "‚ùå Health endpoint failed"
          fi
          
          # Test API docs
          echo "Testing API documentation..."
          if curl -f -s "$BASE_URL/docs" > /dev/null; then
            echo "‚úÖ API docs accessible"
          else
            echo "‚ùå API docs not accessible"
          fi
          
          # Test simulation state
          echo "Testing simulation state endpoint..."
          if curl -f -s "$BASE_URL/api/simulation/state" > /dev/null; then
            echo "‚úÖ Simulation state endpoint working"
          else
            echo "‚ùå Simulation state endpoint failed"
          fi
      
      - name: Deployment summary
        run: |
          echo "üéâ Backend deployment completed!"
          echo ""
          echo "üìä Deployment Summary:"
          echo "   ‚Ä¢ Service: cognisphere-backend"
          echo "   ‚Ä¢ URL: ${{ secrets.RENDER_HEALTH_URL }}"
          echo "   ‚Ä¢ Environment: production"
          echo "   ‚Ä¢ LLM Mode: mock (scalable simulation)"
          echo "   ‚Ä¢ Memory Backend: networkx"
          echo "   ‚Ä¢ Vector Backend: faiss"
          echo ""
          echo "üîó Integration:"
          echo "   ‚Ä¢ Frontend will connect to this backend"
          echo "   ‚Ä¢ CORS enabled for cross-origin requests"
          echo "   ‚Ä¢ Health monitoring active"
          echo ""
          echo "üìà Next steps:"
          echo "   1. Frontend deployment will use this backend"
          echo "   2. Monitor logs in Render dashboard"
          echo "   3. Test simulation initialization"
